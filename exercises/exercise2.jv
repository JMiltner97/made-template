pipeline TrainsPipeline {

    TrainsExtractor
        -> TrainsTextFileInterpreter
        -> TrainsCSVInterpreter 
        -> StatusColumnDeleter
        -> TrainsTableInterpreter
        -> TrainsLoader;


    // 7. Below the pipes, we usually define the blocks 
    // that are connected by the pipes.

    // 8. Blocks instantiate a blocktype by using the oftype keyword.
    // The blocktype defines the available properties that the block
    // can use to specify the intended behavior of the block 
    block TrainsExtractor oftype HttpExtractor {

        // 9. Properties are assigned to concrete values.
        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
    }

    // 10. The HttpExtractor requires no input and produces a binary file as output.
    // This file has to be interpreted, e.g., as text file.
    block TrainsTextFileInterpreter oftype TextFileInterpreter { }

    // 11. Next, we interpret the text file as sheet.
    // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block TrainsCSVInterpreter  oftype CSVInterpreter {  
    delimiter: ";";
    }

    block StatusColumnDeleter oftype ColumnDeleter {
        delete: [column J];
    }

    // 15. As a next step, we interpret the sheet as a table by adding structure.
    // We define a valuetype per column that specifies the data type of the column.
    // Rows that include values that are not valid according to the their valuetypes are dropped automatically. 
    block TrainsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "EVA_NR" oftype integer,
            "DS100" oftype text,
            "IFOPT" oftype IFOPT,
            "NAME" oftype text,
            "Verkehr" oftype Verkehr,
            "Laenge" oftype LB,
            "Breite" oftype LB,
            "Betreiber_Name" oftype text,
            "Betreiber_Nr" oftype integer
        ];
    }

    // 16. As a last step, we load the table into a sink,
    // here into a sqlite file.
    // The structural information of the table is used
    // to generate the correct table.
    block TrainsLoader oftype SQLiteLoader {
        table: "trainstops";
        file: "./trainstops.sqlite";
    }

    // 17. Congratulations!
    // You can now use the sink for your data analysis, app, 
    // or whatever you want to do with the cleaned data.  

    valuetype Verkehr oftype text {
        constraints: [ VerkehrConstraint ];
    }

    constraint VerkehrConstraint oftype AllowlistConstraint {
      allowlist: ["FV", "RV", "nur DPN"];

    }

    valuetype LB oftype decimal {
        constraints: [ LBC ];
    }

    constraint LBC on decimal:
        value >= -90 and value <= 90;

    valuetype IFOPT oftype text {
        constraints: [ IFOPT_Format ];
    }

    constraint IFOPT_Format oftype RegexConstraint {
        regex: /^[a-z]{2}:\d+:\d+(:\d+)?$/;
    }




}