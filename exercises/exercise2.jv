pipeline TrainsPipeline {

    //  define pipeline
    TrainsExtractor
        -> TrainsTextFileInterpreter
        -> TrainsCSVInterpreter 
        -> StatusColumnDeleter
        -> TrainsTableInterpreter
        -> TrainsLoader;

    //define datasource
    block TrainsExtractor oftype HttpExtractor {
        url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
    }

    //define TrainsTextFileInterpreter
    block TrainsTextFileInterpreter oftype TextFileInterpreter { }

    //define TrainsCSVInterpreter to read in CSV correctly
    block TrainsCSVInterpreter  oftype CSVInterpreter {  
    delimiter: ";";
    }

    //define StatusColumnDeleterto delete the "Status" column
    block StatusColumnDeleter oftype ColumnDeleter {
        delete: [column J];
    }

    //define TrainsTableInterpreter to set datatypes accordingly
    block TrainsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "EVA_NR" oftype integer,
            "DS100" oftype text,
            "IFOPT" oftype IFOPT,
            "NAME" oftype text,
            "Verkehr" oftype Verkehr,
            "Laenge" oftype LB,
            "Breite" oftype LB,
            "Betreiber_Name" oftype text,
            "Betreiber_Nr" oftype integer
        ];
    }

    //define TrainsLoader to save data to SQLite DB
    block TrainsLoader oftype SQLiteLoader {
        table: "trainstops";
        file: "./trainstops.sqlite";
    } 

    //define Verkehr datatype to ensure allowed values
    valuetype Verkehr oftype text {
        constraints: [ VerkehrConstraint ];
    }

    //Only allow specified values 
    constraint VerkehrConstraint oftype AllowlistConstraint {
      allowlist: ["FV", "RV", "nur DPN"];

    }

    //define LB datatype to ensure Coordinate consistency
    valuetype LB oftype decimal {
        constraints: [ LBC ];
    }

    //Only allow values >= 90 or <= -90
    constraint LBC on decimal:
        value >= -90 and value <= 90;

    //define IFOPT datatype to ensure REGEX Pattern
    valuetype IFOPT oftype text {
        constraints: [ IFOPT_Format ];
    }

    //Allow Pattern with 2 lowercase or  uppercase letters in the beginning
    constraint IFOPT_Format oftype RegexConstraint {
        regex: /^[a-zA-Z]{2}:\d+:\d+(:\d+)?$/;
    }

}